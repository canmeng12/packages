<head>
<style>
.arrow-down {
    display: inline-block;
    width: 0px;
    height: 0px;
    border-style: solid;
    border-width: 10px;
    border-color: rgb(65 122 180) transparent transparent transparent;
}

.status-table {
    width: 100%;
    table-layout: fixed;
    border-collapse: collapse;
}

.status-table td {
    padding: 4px 2px;
    vertical-align: middle;
    word-wrap: break-word;
    overflow: hidden;
}

.status-row {
    white-space: nowrap;
    min-height: 40px;
}

.status-row td {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.no-wrap {
    white-space: nowrap !important;
    overflow: hidden;
    text-overflow: ellipsis;
}

.label-container {
    display: inline-flex;
    align-items: center;
    gap: 5px;
    width: 100%;
    min-width: 0;
}

.label-text {
    flex-shrink: 0;
    font-size: clamp(11px, 1.8vw, 14px);
    margin-right: 5px;
}

.content-wrapper {
    display: inline-flex;
    align-items: center;
    gap: 3px;
    flex: 1;
    min-width: 0;
}

.status-text {
    flex-shrink: 0;
}

.action-icons {
    display: inline-flex;
    align-items: center;
    gap: 2px;
    margin-left: 3px;
    position: relative;
}

.action-icons img {
    flex-shrink: 0;
    vertical-align: middle;
    position: relative;
}

.mix-proxy-cell {
    display: flex;
    align-items: center;
    gap: 2px;
    justify-content: flex-start;
}

.running-mode-cell {
    display: flex;
    align-items: center;
    gap: 5px;
    justify-content: flex-start;
}

.running-mode-cell .radio-button {
    flex-shrink: 0;
}

.radio-button {
    display: none;
    white-space: nowrap;
    background-color: #d1d1d1;
    border-radius: 4px;
    width: auto;
    max-width: 100%;
    gap: 2px;
    overflow-x: auto;
    overflow-y: hidden;
}

.radio-button input[type="radio"] {
    display: none;
}

.radio-button label {
    display: inline-block;
    font-size: clamp(10px, 2vw, 14px);
    padding: 4px 5px;
    color: white;
    cursor: pointer;
    border-radius: 4px;
    padding: clamp(2px, 1vw, 4px) clamp(3px, 1.2vw, 5px);
    min-width: fit-content;
    text-align: center;
    flex-shrink: 0;
}

.radio-button input[type="radio"]:checked+label {
    background-color: #1080c1;
}

.announcement-banner {
    display: none;
    background-color: #1080c1;
    color: white;
    padding: 8px;
    margin-bottom: 10px;
    margin-left: auto;
    margin-right: auto;
    border-radius: 4px;
    overflow: hidden;
    position: relative;
    height: 24px;
    width: 70%;
}

.announcement-content {
    position: absolute;
    white-space: nowrap;
    padding-right: 50px;
    left: 30px;
    top: 50%;
    transform: translateY(-50%);
    z-index: 1;
}

.megaphone-container {
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 30px;
    background-color: #1080c1;
    z-index: 2;
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px;
}

#megaphone {
    position: absolute;
    left: 8px;
    top: 50%;
    transform: translateY(-50%) scaleX(-1);
    z-index: 2;
    filter: brightness(0) invert(1);
}

#copy_address, #copy_secret, #copy_mix_address, #copy_mix_secret, #copy_pac_config {
    position: relative;
}

.preload-image {
    position: absolute;
    width: 1px;
    height: 1px;
    opacity: 0;
    pointer-events: none;
}

:root[data-darkmode="true"] #copy_address,
:root[data-darkmode="true"] #copy_secret,
:root[data-darkmode="true"] #copy_mix_address,
:root[data-darkmode="true"] #copy_mix_secret,
:root[data-darkmode="true"] #copy_pac_config {
    -webkit-filter: invert(1);
    filter: invert(1);
}

@media screen and (min-width: 1200px) {
    .radio-button label {
        font-size: 14px;
        padding: 4px 6px;
    }
}

@media screen and (max-width: 1200px) {
    .status-table td {
        font-size: 12px;
        padding: 3px 1px;
    }
    
    .label-text {
        font-size: 11px;
    }
    
    .radio-button {
        display: inline-block;
        white-space: nowrap;
        background-color: #d1d1d1;
        border-radius: 4px;
        width: auto;
        max-width: 100%;
        gap: 2px;
        overflow-x: auto;
        overflow-y: hidden;
    }
    
    .radio-button label {
        font-size: 10px;
        padding: 2px 3px;
        min-width: 25px;
    }
}

@media screen and (max-width: 768px) {
    .status-table {
        font-size: 11px;
    }
    
    .status-table td {
        padding: 2px 1px;
    }
    
    .label-text {
        font-size: 10px;
        margin-right: 3px;
    }
    
    .content-wrapper {
        gap: 2px;
    }
    
    .radio-button {
        display: inline-block;
        white-space: nowrap;
        background-color: #d1d1d1;
        border-radius: 4px;
        width: auto;
        max-width: 100%;
        gap: 2px;
        overflow-x: auto;
        overflow-y: hidden;
        scrollbar-width: thin;
        scrollbar-color: #1080c1 transparent;
    }
    
    .radio-button::-webkit-scrollbar {
        height: 4px;
    }
    
    .radio-button::-webkit-scrollbar-track {
        background: transparent;
    }
    
    .radio-button::-webkit-scrollbar-thumb {
        background-color: #1080c1;
        border-radius: 2px;
    }
    
    .action-icons {
        gap: 1px;
        margin-left: 2px;
    }
    
    .action-icons img {
        height: 14px !important;
    }
    
    .radio-button label {
        font-size: 11px;
        padding: 2px 3px;
        min-width: 30px;
    }
}

@media screen and (max-width: 480px) {
    .status-table {
        font-size: 10px;
    }
    
    .label-text {
        font-size: 9px;
    }
    
    .radio-button {
        display: inline-block;
        white-space: nowrap;
        background-color: #d1d1d1;
        border-radius: 4px;
        width: auto;
        max-width: 100%;
        gap: 2px;
        overflow-x: auto;
        overflow-y: hidden;
    }
    
    .action-icons img {
        height: 12px !important;
    }
    
    .radio-button label {
        font-size: 10px;
        padding: 2px 2px;
        min-width: 25px;
    }
}
</style>
</head>
<%
    local uci = require("luci.model.uci").cursor()
    local RELEASE_BRANCH = uci:get("openclash", "config", "release_branch")
    local random = tostring(os.time()):reverse():sub(1, 9)
%>
<fieldset class="cbi-section">
    <table width="100%">
      	<td colspan="4" width="100%">
            <div id="announcement-banner" class="announcement-banner">
                <div class="megaphone-container"></div>
                <img id="megaphone" src="/luci-static/resources/openclash/img/megaphone-simple.svg?<%=random%>" loading="lazy" alt="megaphone" width="15px" height="15px">
                <div id="announcement-content" class="announcement-content"></div>
            </div>
      		<p style="margin: 10px 0; text-align: center">
                <img id="_logo" src="/luci-static/resources/openclash/img/logo.png?<%=random%>" loading="lazy" width="150px" height="150px" onload="return logo_check(this,this.src,'https://raw.githubusercontent.com/vernesong/OpenClash/<%=RELEASE_BRANCH%>/img/meta.png')" onerror="return logo_error(this,'/luci-static/resources/openclash/img/logo.png?<%=random%>')" title="Hello, World!" alt="OpenClash" onclick="return homepage()" />
                <img class="preload-image" src="/luci-static/resources/openclash/img/version.svg?<%=random%>" alt="">
                <img class="preload-image" src="/luci-static/resources/openclash/img/copy-link.svg" alt="">
                <img class="preload-image" src="/luci-static/resources/openclash/img/password.svg" alt="">
                <img class="preload-image" src="/luci-static/resources/openclash/img/globe-hemisphere-east.svg" alt="">
            </p>
      		<p id="_clashversion" style="margin: 10px 0; text-align: center">
                <img src="/luci-static/resources/openclash/img/version.svg?<%=random%>" alt="currentversion" height="21px" onclick="return go_update()">
      		</p>
        </td></tr>
        <tr><td colspan="4" width="100%">
             <p style="margin: 10px 0; text-align: center">
                <img id="gitbook" src="/luci-static/resources/openclash/img/Wiki.svg?<%=random%>" loading="lazy" alt="GitBook" width="50px" height="20px" onerror="return imgerrorfuns(this,'https://img.shields.io/badge/Wiki--lightgrey?logo=GitBook&style=social')" onclick="return gitbookpage()" />
                &nbsp;&nbsp;&nbsp;
                <img id="wiki" src="/luci-static/resources/openclash/img/Tutorials.svg?<%=random%>" loading="lazy" alt="Wiki" width="75px" height="20px" onerror="return imgerrorfuns(this,'https://img.shields.io/badge/Tutorials--lightgrey?logo=Wikipedia&style=social')" onclick="return wikipage()" />
                &nbsp;&nbsp;&nbsp;
                <img id="star" src="/luci-static/resources/openclash/img/Star.svg?<%=random%>g" loading="lazy" alt="star" width="50px" height="20px" onerror="return imgerrorfuns(this,'https://img.shields.io/badge/Star--lightgrey?logo=github&style=social')" onclick="return homepage()" />
                &nbsp;&nbsp;&nbsp;
                <img id="telegram" src="/luci-static/resources/openclash/img/Telegram.svg?<%=random%>" loading="lazy" alt="Telegram" onerror="return imgerrorfuns(this,'https://img.shields.io/badge/Telegram--lightgrey?logo=Telegram&style=social')" onclick="return telegrampage()" />
                &nbsp;&nbsp;&nbsp;
                <img id="sponsor" src="/luci-static/resources/openclash/img/Sponsor.svg?<%=random%>" loading="lazy" alt="Sponsor" width="73px" height="20px" onerror="return imgerrorfuns(this,'https://img.shields.io/badge/Sponsor--lightgrey?logo=ko-fi&style=social')" onclick="return sponsorpage()" />
            </p>
        </td></tr>
        <tr><td width="100%" colspan="4">
      		<div style="margin: 10px 0; text-align: center" id="_clashstart">
      			<b><%:Tip: after started, please wait patiently until the connection is normal%></b>
            </div>
        </td></tr>
        <tr class="status-row">
            <td width="25%" class="no-wrap"><%:Core Status%></td>
            <td width="25%" align="left" class="no-wrap">
                <span id="_clash"><%:Collecting data...%></span><span id="_watchdog"></span>
            </td>
            <td width="25%" class="no-wrap"><%:Control Panel%></td>
            <td width="25%" align="left" class="no-wrap">
                <div class="content-wrapper">
                    <span id="_daip"><%:Collecting data...%></span><span id="_dapo"></span>
                    <div class="action-icons">
                        &nbsp;<img src="/luci-static/resources/openclash/img/copy-link.svg" height="16px" title="<%:Copy Address%>" alt="<%:Copy Address%>" id="copy_address" style="cursor: pointer; display: none;" onclick="return copyAddress()" />
                        &nbsp;<img src="/luci-static/resources/openclash/img/password.svg" height="16px" title="<%:Copy Secret%>" alt="<%:Copy Secret%>" id="copy_secret" style="cursor: pointer; display: none;" onclick="return copySecret()" />
                    </div>
                </div>
            </td>
        </tr>
        <tr class="status-row">
            <td width="20%" class="no-wrap"><%:Running Mode%></td>
            <td width="30%" align="left">
                <div class="running-mode-cell">
                    <span id="_mode"><%:Collecting data...%></span>
                    <span id="radio-ru-mode" class="radio-button">
                        <input type="radio" id="normal" name="radios-ru" value="" checked onclick="return switch_run_mode(this.value)"/>
                        <label for="normal" id="run_normal"><%:Compat%></label>
                        <input type="radio" id="tun" name="radios-ru" value="-tun" onclick="return switch_run_mode(this.value)"/>
                        <label for="tun"><%:TUN%></label>
                        <input type="radio" id="mix" name="radios-ru" value="-mix" onclick="return switch_run_mode(this.value)"/>
                        <label for="mix"><%:Mix%></label>
                    </span>
                </div>
            </td>
            <td width="25%" class="no-wrap"><%:Mix Proxy%></td>
            <td width="25%" align="left">
                <div class="mix-proxy-cell">
                    <span id="_mix_proxy"><%:Collecting data...%></span>
                    <div class="action-icons">
                        &nbsp;<img src="/luci-static/resources/openclash/img/copy-link.svg" height="16px" title="<%:Copy Address%>" alt="<%:Copy Address%>" id="copy_mix_address" style="cursor: pointer; display: none;" onclick="return copyMixAddress()" />
                        &nbsp;<img src="/luci-static/resources/openclash/img/globe-hemisphere-east.svg" height="16px" title="<%:Get PAC Config%>" alt="<%:Get PAC Config%>" id="copy_pac_config" style="cursor: pointer; display: none;" onclick="return generatePacConfig()" />
                        &nbsp;<img src="/luci-static/resources/openclash/img/password.svg" height="16px" title="<%:Copy Auth Info%>" alt="<%:Copy Auth Info%>" id="copy_mix_secret" style="cursor: pointer; display: none;" onclick="return copyMixAuth()" />
                    </div>
                </div>
            </td>
        </tr>
        <tr class="status-row">
            <td width="25%">
                <div class="label-container">
                    <span class="label-text"><%:Proxy Mode%></span>
                    <div class="content-wrapper">
                        <span id="radio-de"><%:Collecting data...%></span>
                        <span id="radio-mode" class="radio-button">
                            <input type="radio" id="rule" name="radios" value="rule" checked onclick="return switch_rule_mode(this.value)"/>
                            <label for="rule"><%:Rule%></label>
                            <input type="radio" id="global" name="radios" value="global" onclick="return switch_rule_mode(this.value)"/>
                            <label for="global"><%:Global%></label>
                            <input type="radio" id="direct" name="radios" value="direct" onclick="return switch_rule_mode(this.value)"/>
                            <label for="direct"><%:Direct%></label>
                        </span>
                    </div>
                </div>
            </td>
            <td width="25%">
                <div class="label-container">
                    <span class="label-text"><%:Area Bypass%></span>
                    <div class="content-wrapper">
                        <span id="oc-setting-oversea-de"><%:Collecting data...%></span>
                        <span id="oc-setting-oversea" class="radio-button">
                            <input type="radio" id="oc_setting_oversea_1" name="oc-setting-oversea" value="1" onclick="return switch_oc_setting_oversea('1')"/>
                            <label for="oc_setting_oversea_1"><%:Mainland%></label>
                            <input type="radio" id="oc_setting_oversea_2" name="oc-setting-oversea" value="2" onclick="return switch_oc_setting_oversea('2')"/>
                            <label for="oc_setting_oversea_2"><%:Oversea%></label>
                            <input type="radio" id="oc_setting_oversea_0" name="oc-setting-oversea" value="0" onclick="return switch_oc_setting_oversea('0')"/>
                            <label for="oc_setting_oversea_0"><%:Off%></label>
                        </span>
                    </div>
                </div>
            </td>
            <td width="25%">
                <div class="label-container">
                    <span class="label-text"><%:Sniffer%><a href="javascript:void(0);" onclick="window.open('https://wiki.metacubex.one/config/sniff/?h=sniff#_1', '_blank');" style="color: #0066cc; text-decoration: none;" title="<%:Sniff the domain name of the traffics to avoid rule-based proxy failure%>"> (?)</a></span>
                    <div class="content-wrapper">
                        <span id="dns-setting-sniffer-de"><%:Collecting data...%></span>
                        <span id="dns-setting-sniffer" class="radio-button">
                            <input type="radio" id="meta_sniffer_on" name="meta-sniffer-radios" value="1" onclick="return switch_meta_sniffer('1')"/>
                            <label for="meta_sniffer_on"><%:On%></label>
                            <input type="radio" id="meta_sniffer_off" name="meta-sniffer-radios" value="0" onclick="return switch_meta_sniffer('0')"/>
                            <label for="meta_sniffer_off"><%:Off%></label>
                        </span>
                    </div>
                </div>
            </td>
            <td width="25%">
                <div class="label-container">
                    <span class="label-text"><%:DNS Proxy%> <a href="javascript:void(0);" onclick="window.open('https://wiki.metacubex.one/config/dns/?h=res#respect-rules', '_blank');" style="color: #0066cc; text-decoration: none;" title="<%:DNS querys respect-rules to preventing access failure%>"> (?)</a></span>
                    <div class="content-wrapper">
                        <span id="dns-setting-respect-de"><%:Collecting data...%></span>
                        <span id="dns-setting-respect" class="radio-button">
                            <input type="radio" id="respect_rules_on" name="respect-rules-radios" value="1" onclick="return switch_respect_rules('1')"/>
                            <label for="respect_rules_on"><%:On%></label>
                            <input type="radio" id="respect_rules_off" name="respect-rules-radios" value="0" onclick="return switch_respect_rules('0')"/>
                            <label for="respect_rules_off"><%:Off%></label>
                        </span>
                    </div>
                </div>
            </td>
        </tr>
        <tr>
            <td colspan="4"><div style="margin: 10px 0; text-align: center"><span id="_web" style="width: 25%; display: inline-block;"></span><span id="_webm" style="width: 25%; display: inline-block;"><%:Collecting data...%></span><span id="_webz" style="width: 25%; display: inline-block;"><%:Collecting data...%></span><span id="_webo" style="width: 25%; display: inline-block;"></span></div></td>
        </tr>
        <tr id="tool_label2"><td colspan="4">
            <div style="margin: 10px 0; text-align: center">
<span>
&nbsp;&nbsp;<%:Up:%>&nbsp;
    <span id="upload_">
        <font style=color:green>
        0 KB/S
        </font>
    </span>
</span>

<span>
&nbsp;&nbsp;<%:Down:%>&nbsp;
    <span id="download_">
        <font style=color:green>
        0 KB/S
        </font>
    </span>
</span>

<span>
&nbsp;&nbsp;<%:Up Total:%>&nbsp;
    <span id="uploadtotal_">
        <font style=color:green>
        0 KB
        </font>
    </span>
</span>

<span>
&nbsp;&nbsp;<%:Down Total:%>&nbsp;
    <span id="downloadtotal_">
        <font style=color:green>
        0 KB
        </font>
    </span>
</span>

<span>
&nbsp;&nbsp;<%:Connections:%>&nbsp;
    <span id="connect_t">
        <font style=color:green>
        0
        </font>
    </span>
</span>

<span>
&nbsp;&nbsp;<%:Ram:%>&nbsp;
    <span id="mem_t">
        <font style=color:green>
        0 KB
        </font>
    </span>
</span>

<span>
&nbsp;&nbsp;<%:CPU:%>&nbsp;
    <span id="cpu_t">
        <font style=color:green>
        0 %
        </font>
    </span>
    &nbsp;&nbsp;
</span>
</div>
</td></tr>
    <tr height="50px">
        <td width="100%" colspan="4">
            <div id="hid_btn" style="text-align: center;" onclick="hid_btn_action()">
                <div id="hid_icon" class="arrow-down"></div>
            </div>
        </td>
    </tr>
    <tr id="hid_1"><td width="100%" colspan="4"><p style="margin: 10px 0; text-align: center"><b><%:Quick Operation%></b></p></td></tr>
    <tr id="hid_2">
        <td width="25%" align="center"><p style="margin: 10px 0; text-align: center" id="_close_all_connection"><%:Collecting data...%></p></td>
        <td width="25%" align="center"><p style="margin: 10px 0; text-align: center" id="_reload_firewall"><%:Collecting data...%></p></td>
        <td width="25%" align="center"><p style="margin: 10px 0; text-align: center" id="_flush_fakeip_cache"><%:Collecting data...%></p></td>
        <td width="25%" align="center"><p style="margin: 10px 0; text-align: center" id="_update_subscribe"><%:Collecting data...%></p></td>
    </tr>
    <tr id="hid_3">
        <td width="25%" align="center"><p style="margin: 10px 0; text-align: center" id="_update_other_rules"><%:Collecting data...%></p></td>
        <td width="25%" align="center"><p style="margin: 10px 0; text-align: center" id="_update_geoip"><%:Collecting data...%></p></td>
        <td width="25%" align="center"><p style="margin: 10px 0; text-align: center" id="_update_geosite"><%:Collecting data...%></p></td>
        <td width="25%" align="center"><p style="margin: 10px 0; text-align: center" id="_one_key_update"><%:Collecting data...%></p></td>
    </tr>
</table>
</fieldset>
<fieldset id="state" class="cbi-section">
    <table width="100%">
        <tr><td width="100%" colspan="4">
            <p style="margin: 10px 0; text-align: center">
                <b><%:Please ensure that all items are displayed normally before running. If you need to update, please go to the global settings page%></b>
            </p>
        </td></tr>
        <tr><td width="25%"><%:Node Select Backup%></td><td width="25%" align="left" id="_historychecktime"><%:Collecting data...%></td><td width="25%"><%:lhie1 Rule Update%></td><td width="25%" align="left" id="_lhie1"><%:Collecting data...%></td></tr>
        <tr><td width="25%"><%:Mainland IP Update%></td><td width="25%" align="left" id="_chnroute"><%:Collecting data...%></td><td width="25%"><%: Mainland IPv6 Update%></td><td width="25%" align="left" id="_chnroutev6"><%:Collecting data...%></td></tr>
        <tr><td width="25%"><%:GeoIP Data Update%></td><td width="25%" align="left" id="_ipdb"><%:Collecting data...%></td><td width="25%"><%:GeoSite Data Update%></td><td width="25%" align="left" id="_geosite"><%:Collecting data...%></td></tr>
    </table>
</fieldset>

<script type="text/javascript">//<![CDATA[
    var DOMCache = {
        clash: document.getElementById('_clash'),
        mode: document.getElementById('_mode'),
        web: document.getElementById('_web'),
        webo: document.getElementById('_webo'),
        webm: document.getElementById('_webm'),
        webz: document.getElementById('_webz'),
        watchdog: document.getElementById('_watchdog'),
        daip: document.getElementById('_daip'),
        dase: document.getElementById('_dase'),
        dapo: document.getElementById('_dapo'),
        startlog: document.getElementById('_clashstart'),
        clashversion: document.getElementById('_clashversion'),
        close_all_connection: document.getElementById('_close_all_connection'),
        reload_firewall: document.getElementById('_reload_firewall'),
        one_key_update: document.getElementById('_one_key_update'),
        update_subscribe: document.getElementById('_update_subscribe'),
        update_other_rules: document.getElementById('_update_other_rules'),
        update_geoip: document.getElementById('_update_geoip'),
        update_geosite: document.getElementById('_update_geosite'),
        flush_fakeip_cache: document.getElementById('_flush_fakeip_cache'),
        ipdb: document.getElementById('_ipdb'),
        geosite: document.getElementById('_geosite'),
        lhie1: document.getElementById('_lhie1'),
        chnroute: document.getElementById('_chnroute'),
        chnroutev6: document.getElementById('_chnroutev6'),
        historychecktime: document.getElementById('_historychecktime'),
        hid_1: document.getElementById("hid_1"),
        hid_2: document.getElementById("hid_2"),
        hid_3: document.getElementById("hid_3"),
        state: document.getElementById("state"),
        hid_btn: document.getElementById("hid_btn"),
        tool_label2: document.getElementById('tool_label2'),
        radio_mode: document.getElementById('radio-mode'),
        radio: document.getElementsByName("radios"),
        radio_de: document.getElementById('radio-de'),
        radio_ru_mode: document.getElementById('radio-ru-mode'),
        radio_ru: document.getElementsByName("radios-ru"),
        radio_run_normal: document.getElementById("run_normal"),
        hid_icon: document.getElementById("hid_icon"),
        copy_secret: document.getElementById('copy_secret'),
        copy_address: document.getElementById('copy_address'),
        copy_mix_address: document.getElementById('copy_mix_address'),
        copy_mix_secret: document.getElementById('copy_mix_secret'),
        copy_pac_config: document.getElementById('copy_pac_config'),
        mix_proxy: document.getElementById('_mix_proxy'),
        dns_setting_sniffer_de: document.getElementById('dns-setting-sniffer-de'),
        dns_setting_respect_de: document.getElementById('dns-setting-respect-de'),
        dns_setting_sniffer: document.getElementById('dns-setting-sniffer'),
        dns_setting_respect: document.getElementById('dns-setting-respect'),
        meta_sniffer_on: document.getElementById('meta_sniffer_on'),
        meta_sniffer_off: document.getElementById('meta_sniffer_off'),
        respect_rules_on: document.getElementById('respect_rules_on'),
        respect_rules_off: document.getElementById('respect_rules_off'),
        oc_setting_oversea_de: document.getElementById('oc-setting-oversea-de'),
        oc_setting_oversea: document.getElementById('oc-setting-oversea'),
        oc_setting_oversea_0: document.getElementById('oc_setting_oversea_0'),
        oc_setting_oversea_1: document.getElementById('oc_setting_oversea_1'),
        oc_setting_oversea_2: document.getElementById('oc_setting_oversea_2')
    };

    // 状态管理和请求缓存
    var StateManager = {
        current_status: {},
        cached_proxy_info: null,
        last_request_time: {},
        request_cache: {},
        cache_ttl: 2000, // 2秒缓存
        
        cachedXHRGet: function(url, callback, force) {
            var now = Date.now();
            var cacheKey = url;
            
            if (!force && this.request_cache[cacheKey] && 
                (now - this.last_request_time[cacheKey] < this.cache_ttl)) {
                callback(null, this.request_cache[cacheKey]);
                return;
            }
            
            XHR.get(url, null, function(x, data) {
                if (x && x.status == 200) {
                    StateManager.request_cache[cacheKey] = data;
                    StateManager.last_request_time[cacheKey] = now;
                }
                callback(x, data);
            });
        },
        
        batchUpdateDOM: function(updates) {
            var fragment = document.createDocumentFragment();
            for (var i = 0; i < updates.length; i++) {
                var update = updates[i];
                if (update.element && update.content !== undefined) {
                    update.element.innerHTML = update.content;
                }
            }
        }
    };

    // WebSocket
    var WSManager = {
        connections: {},
        retry_count: 0,
        max_retries: 3,
        reconnect_delay: 1000,
        
        createConnection: function(type, url, messageHandler) {
            if (this.connections[type]) {
                this.connections[type].close();
            }
            
            var ws = new WebSocket(url);
            ws.onmessage = messageHandler;
            ws.onerror = this.handleError.bind(this);
            ws.onopen = this.handleOpen.bind(this);
            ws.onclose = this.handleClose.bind(this, type, url, messageHandler);
            
            this.connections[type] = ws;
            return ws;
        },
        
        handleOpen: function() {
            ws_connect = true;
            ws_error = false;
            this.retry_count = 0;
        },
        
        handleError: function() {
            ws_error = true;
            ws_terror();
        },
        
        handleClose: function(type, url, messageHandler) {
            if (this.retry_count < this.max_retries) {
                setTimeout(function() {
                    WSManager.retry_count++;
                    WSManager.createConnection(type, url, messageHandler);
                }, this.reconnect_delay);
            }
        },
        
        closeAll: function() {
            for (var type in this.connections) {
                if (this.connections[type]) {
                    this.connections[type].close();
                    delete this.connections[type];
                }
            }
        }
    };

    var script_radio, script_radio_label;
    var hid_btn_if = true;
    var ws_connect = false;
    var ws_error = false;
    var ws_retry = 0;
    var luci_protocol;
    var state_refresh;
    var s, gr;
    
    DOMCache.hid_1.style.display = "none";
    DOMCache.hid_2.style.display = "none";
    DOMCache.hid_3.style.display = "none";
    DOMCache.state.style.display = "none";

    // 主状态
    XHR.poll(3, '<%=luci.dispatcher.build_url("admin", "services", "openclash", "status")%>', null, function(x, status) {
        if (x && x.status == 200) {
            var updates = [
                {
                    element: DOMCache.clash,
                    content: status.clash ? '<b style=color:green>' + status.core_type +'&nbsp;&nbsp;&nbsp;<%:Running%></b>' : '<b style=color:red><%:Not Running%></b>'
                },
                {
                    element: DOMCache.watchdog,
                    content: status.watchdog ? '&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;<%:Daemons%>:&nbsp;&nbsp;&nbsp;<b style=color:green><%:Running%></b>' : ''
                }
            ];

			get_run_mode();
            
            // 控制面板
            var webContent = status.web ? '<input type="button" class="btn cbi-button cbi-button-reload" value="<%:Yacd Control Panel%>" onclick="return ycad_dashboard(this)"/>' : '<b style=color:red><%:Not Running%></b>';
            updates.push({element: DOMCache.web, content: webContent});
            
            var weboContent = status.web ? '<input type="button" class="btn cbi-button cbi-button-reload" value="<%:Dashboard Control Panel%>" onclick="return net_dashboard(this)"/>' : '<b style=color:red><%:Not Running%></b>';
            updates.push({element: DOMCache.webo, content: weboContent});
            
            var webmContent = status.web ? '<input type="button" class="btn cbi-button cbi-button-reload" value="<%:Metacubexd Control Panel%>" onclick="return meta_dashboard(this)"/>' : '<b style=color:red><%:Not Running%></b>';
            updates.push({element: DOMCache.webm, content: webmContent});
            
            var webzContent = status.web ? '<input type="button" class="btn cbi-button cbi-button-reload" value="<%:zashboard Control Panel%>" onclick="return net_zashboard(this)"/>' : '<b style=color:red><%:Not Running%></b>';
            updates.push({element: DOMCache.webz, content: webzContent});

            // 快速操作
            var closeConnContent = status.clash ? '<input type="button" class="btn cbi-button cbi-button-reload" value="<%:Close All Connections%>" onclick="return b_close_all_connection(this)"/>' : '<b style=color:red><%:Not Running%></b>';
            updates.push({element: DOMCache.close_all_connection, content: closeConnContent});
            
            var reloadFwContent = status.clash ? '<input type="button" class="btn cbi-button cbi-button-reload" value="<%:Reload Firewall Rules%>" onclick="return b_reload_firewall(this)"/>' : '<b style=color:red><%:Not Running%></b>';
            updates.push({element: DOMCache.reload_firewall, content: reloadFwContent});
            
            var flushCacheContent = status.clash ? '<input type="button" class="btn cbi-button cbi-button-reload" value="<%:Flush Fake-IP Cache%>" onclick="return b_flush_fakeip_cache(this)"/>' : '<b style=color:red><%:Not Running%></b>';
            updates.push({element: DOMCache.flush_fakeip_cache, content: flushCacheContent});

            // 更新按钮
            updates.push({
                element: DOMCache.one_key_update,
                content: '<input type="button" class="btn cbi-button cbi-button-reload" value="<%:Check All Components Update%>" onclick="return all_one_key_update(this)"/>'
            });
            updates.push({
                element: DOMCache.update_subscribe,
                content: '<input type="button" class="btn cbi-button cbi-button-reload" value="<%:Check Config Update%>" onclick="return b_update_subscribe(this)"/>'
            });
            updates.push({
                element: DOMCache.update_other_rules,
                content: '<input type="button" class="btn cbi-button cbi-button-reload" value="<%:Check Third Party Rules Update%>" onclick="return b_update_other_rules(this)"/>'
            });
            updates.push({
                element: DOMCache.update_geoip,
                content: '<input type="button" class="btn cbi-button cbi-button-reload" value="<%:Check GEOIP Data Update%>" onclick="return b_update_geoip(this)"/>'
            });
            updates.push({
                element: DOMCache.update_geosite,
                content: '<input type="button" class="btn cbi-button cbi-button-reload" value="<%:Check GeoSite Data Update%>" onclick="return b_update_geosite(this)"/>'
            });

            StateManager.batchUpdateDOM(updates);

            // WebSocket协议
            if (status.daip && window.location.hostname == status.daip) {
                luci_protocol = (window.location.protocol == "http:" ? "ws://" : "wss://") + status.daip + ":" + status.cn_port;
            } else if (status.daip && window.location.hostname != status.daip && status.db_foward_domain && status.db_foward_port) {
                luci_protocol = (window.location.protocol == "http:" ? "ws://" : "wss://") + status.db_foward_domain + ":" + status.db_foward_port;
            } else {
                luci_protocol = (window.location.protocol == "http:" ? "ws://" : "wss://") + status.daip + ":" + status.cn_port;
            }

            // 地址和端口
            if (status.clash && status.watchdog) {
                var daipContent, dapoContent;
                
                if (status.daip && window.location.hostname == status.daip) {
                    daipContent = status.daip ? "<b style=color:green>"+status.daip+"</b>" : "<b style=color:red>"+"<%:Not Set%>"+"</b>";
                    dapoContent = status.cn_port ? "<b style=color:green>:"+status.cn_port+"</b>" : "<b style=color:red>"+"<%:Not Set%>"+"</b>";
                } else if (status.daip && window.location.hostname != status.daip && status.db_foward_domain && status.db_foward_port) {
                    daipContent = status.db_foward_domain ? "<b style=color:green>"+status.db_foward_domain+"</b>" : "<b style=color:red>"+"<%:Not Set%>"+"</b>";
                    dapoContent = status.db_foward_port ? "<b style=color:green>:"+status.db_foward_port+"</b>" : "<b style=color:red>"+"<%:Not Set%>"+"</b>";
                } else {
                    daipContent = status.daip ? "<b style=color:green>"+status.daip+"</b>" : "<b style=color:red>"+"<%:Not Set%>"+"</b>";
                    dapoContent = status.cn_port ? "<b style=color:green>:"+status.cn_port+"</b>" : "<b style=color:red>"+"<%:Not Set%>"+"</b>";
                }
                
                DOMCache.daip.innerHTML = daipContent;
                DOMCache.dapo.innerHTML = dapoContent;
                
                DOMCache.radio_mode.style.display = "inline-block";
                DOMCache.radio_de.style.display = "none";
                DOMCache.radio_ru_mode.style.display = "inline-block";
                DOMCache.dns_setting_sniffer.style.display = "inline-block";
                DOMCache.dns_setting_respect.style.display = "inline-block";
                DOMCache.oc_setting_oversea.style.display = "inline-block";
                DOMCache.dns_setting_sniffer_de.style.display = "none";
                DOMCache.dns_setting_respect_de.style.display = "none";
                DOMCache.oc_setting_oversea_de.style.display = "none";
                get_oc_settings();
            } else {
                DOMCache.radio_mode.style.display = "none";
                DOMCache.radio_de.style.display = "";
                DOMCache.radio_de.innerHTML = "<b style=color:red><%:Not Running%></b>";
                DOMCache.radio_ru_mode.style.display = "none";
                DOMCache.dns_setting_sniffer.style.display = "none";
                DOMCache.dns_setting_respect.style.display = "none";
                DOMCache.oc_setting_oversea.style.display = "none";
                DOMCache.dns_setting_sniffer_de.style.display = "";
                DOMCache.dns_setting_respect_de.style.display = "";
                DOMCache.oc_setting_oversea_de.style.display = "";
                DOMCache.dns_setting_sniffer_de.innerHTML = "<b style=color:red><%:Not Running%></b>";
                DOMCache.dns_setting_respect_de.innerHTML = "<b style=color:red><%:Not Running%></b>";
                DOMCache.oc_setting_oversea_de.innerHTML = "<b style=color:red><%:Not Running%></b>";
                DOMCache.daip.innerHTML = "<b style=color:red><%:Not Running%></b>";
                DOMCache.dapo.innerHTML = "";
            }

            StateManager.current_status = status;
            
            // 混合代理信息
            if (status.clash && status.daip) {
                StateManager.cachedXHRGet('<%=luci.dispatcher.build_url("admin", "services", "openclash", "proxy_info")%>', function(x, proxy_info) {
                    if (x && x.status == 200) {
                        StateManager.cached_proxy_info = proxy_info;
                        var proxy_ip = status.daip;
                        var mix_addr = proxy_ip + ':' + (proxy_info.mixed_port || '7893');
                        DOMCache.mix_proxy.innerHTML = "<b style=color:green>" + mix_addr + "</b>";
                    } else {
                        StateManager.cached_proxy_info = null;
                        DOMCache.mix_proxy.innerHTML = "<b style=color:red><%:Not Available%></b>";
                    }
                });
                
                DOMCache.copy_secret.style.display = "inline";
                DOMCache.copy_address.style.display = "inline";
                DOMCache.copy_mix_address.style.display = "inline";
                DOMCache.copy_mix_secret.style.display = "inline";
                DOMCache.copy_pac_config.style.display = "inline";
            } else {
                StateManager.cached_proxy_info = null;
                DOMCache.mix_proxy.innerHTML = "<b style=color:red><%:Not Running%></b>";
                DOMCache.copy_secret.style.display = "none";
                DOMCache.copy_address.style.display = "none";
                DOMCache.copy_mix_address.style.display = "none";
                DOMCache.copy_mix_secret.style.display = "none";
                DOMCache.copy_pac_config.style.display = "none";
            }
            
            // WebSocket连接管理
            function ws_open() {
                WSManager.closeAll();
                WSManager.createConnection('traffic', luci_protocol+"/traffic?token="+status.dase, ws_tmessage);
                WSManager.createConnection('connections', luci_protocol+"/connections?token="+status.dase, ws_cmessage);
                WSManager.createConnection('memory', luci_protocol+"/memory?token="+status.dase, ws_mmessage);
            }

            if (status.watchdog && status.clash) {
                if (!ws_connect) {
                    if (!ws_error) {
                        ws_open();
                    } else if (ws_retry < 3) {
                        ws_retry = ws_retry + 1;
                        ws_open();
                    } else {
                        ws_terror();
                    }
                }
            } else {
                ws_connect = false;
                ws_error = false;
                if (status.clash) {
                    ws_terror();
                }
            }
        }
    });

	get_rule_mode();
    clashversion_check();
    check_core();
	state_get();

    // 日志轮询
    var startlogPolling = {
        errorCheck: function() {
            XHR.poll(3, '<%=luci.dispatcher.build_url("admin", "services", "openclash", "startlog")%>', null, function(x, status) {
                if (x && x.status == 200) {
                    if (status.startlog.match("level=fatal") || status.startlog.match("level=error") || status.startlog.indexOf("FTL [Config]") != "-1") {
                        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "del_start_log")%>', null, function(x) {});
                        if (status.startlog.match("level=fatal") || status.startlog.match("level=error")) {
                            alert('<%:OpenClash Start Failed%> :\n\n' + status.startlog.split('msg=')[1]);
                        } else {
                            alert('<%:OpenClash Start Failed%> :\n\n' + status.startlog.split('FTL [Config] ')[1]);
                        }
                    } else if (status.startlog != "\n" && status.startlog != "") {
                        startlogPolling.updateDisplay(status.startlog);
                    }
                }
            });
        },
        
        tipsRotation: function() {
            XHR.poll(6, '<%=luci.dispatcher.build_url("admin", "services", "openclash", "startlog")%>', null, function(x, status) {
                if (x && x.status == 200) {
                    if (status.startlog == "\n" || status.startlog == "") {
                        startlogPolling.showRandomTip();
                    }
                }
            });
        },
        
        updateDisplay: function(log) {
            var color = 'green';
            if (log.match("Tip:") || log.match("提示：")) color = '#ff6f00';
            else if (log.match("Error:") || log.match("错误：")) color = '#FF0000';
            else if (log.match("Warning:") || log.match("警告：")) color = '#ff00bb';
            else if (log.match("Watchdog:") || log.match("守护程序：")) color = '#b300ff';
            
            DOMCache.startlog.innerHTML = '<b style=color:' + color + '>' + log + '</b>';
        },
        
        showRandomTip: function() {
            var tips = [
                '<%:Tip: You can modify the profile on the profile page (for content that is not taken over)%>',
                '<%:Tip: click the version icon above to jump to the client publishing page%>',
                '<%:Tip: do not write configuration files? Try to create one click on the server page%>',
                '<%:Tip: some website are abnormal? Try switching modes or using third-party rules%>',
                '<%:Tip: using the fake IP mode can get a faster access experience%>',
                '<%:Tip: query DNS by TLS & TCP & HTTPS can get better anti pollution effect%>',
                '<%:Tip: openlash will check the configuration file parameters to ensure that it works properly%>',
                '<%:Tip: the nameserver group must have at least one server set when using custom DNS%>',
                '<%:Tip: the website access check shows the connection of the device currently logged in to the Luci page%>',
                '<%:Tip: after started, please wait patiently until the connection is normal%>',
                '<%:Tip: if you don not use IPv6, please turn off the DHCP service of IPv6, otherwise the connection will be abnormal%>',
                '<%:Tip: you can update the version in the global settings page%>',
                '<%:Note: It is not recommended to enable IPv6 and related services for routing. Most of the network connection problems reported so far are related to it%>',
                '<%:Note: Turning on secure DNS in the browser will cause abnormal shunting, please be careful to turn it off%>',
                '<%:Note: Some software will modify the device HOSTS, which will cause abnormal shunt, please pay attention to check%>',
                '<%:Note: The default proxy routes local traffic, BT, PT download, etc., please use Redir-Host mode as much as possible and pay attention to traffic avoidance%>'
            ];
            var randomTip = tips[Math.floor(Math.random() * tips.length)];
            DOMCache.startlog.innerHTML = '<b><font>' + randomTip + '</font></b>';
        }
    };

    startlogPolling.errorCheck();
    startlogPolling.tipsRotation();
    
    // 公告
    setTimeout(function() {
        loadAnnouncement();
    }, 1000);

    function loadAnnouncement() {
        var userLang = navigator.language || navigator.userLanguage; 
        var isChineseUser = userLang.indexOf('zh') === 0;
        
        StateManager.cachedXHRGet('<%=luci.dispatcher.build_url("admin", "services", "openclash", "announcement")%>', function(x, status) {
            if (x && x.status == 200) {
                var banner = document.getElementById('announcement-banner');
                var content = document.getElementById('announcement-content');
                var announcements = [];
                
                if (status.content) {
                    try {
                        var contentData = status.content;
                        if (typeof contentData === 'string') {
                            contentData = JSON.parse(contentData);
                        }
                        
                        if (Array.isArray(contentData)) {
                            if (contentData.length > 0 && (contentData[0].zh || contentData[0].en)) {
                                contentData.forEach(function(item) {
                                    if (isChineseUser && item.zh) {
                                        announcements.push(item.zh);
                                    } else if (item.en) {
                                        announcements.push(item.en);
                                    } else if (item.zh) {
                                        announcements.push(item.zh);
                                    }
                                });
                            } else {
                                announcements = contentData;
                            }
                        } else if (typeof contentData === 'string' && contentData.trim() !== '') {
                            announcements = [contentData];
                        }
                    } catch (e) {
                        if (typeof status.content === 'string' && status.content.trim() !== '') {
                            announcements = [status.content];
                        }
                    }
                }
                
                if (announcements.length === 0) {
                    banner.style.display = 'none';
                    return;
                }
                
                banner.style.display = 'block';
                var currentIndex = 0;
                content.textContent = announcements[currentIndex];
                
                var isPaused = false;
                banner.addEventListener('mouseenter', function() { isPaused = true; });
                banner.addEventListener('mouseleave', function() { isPaused = false; });
                
                setTimeout(function() {
                    var bannerWidth = banner.offsetWidth;
                    var contentWidth = content.offsetWidth;
                    content.style.left = bannerWidth + 'px';
                    
                    var speed = 3;
                    var position = bannerWidth;
                    var pauseCounter = 0;
                    var pauseDuration = 20;
                    
                    function moveText() {
                        if (!isPaused) {
                            if (position < -contentWidth && pauseCounter >= pauseDuration) {
                                currentIndex = (currentIndex + 1) % announcements.length;
                                content.textContent = announcements[currentIndex];
                                contentWidth = content.offsetWidth;
                                position = bannerWidth;
                                pauseCounter = 0;
                            } else if (position < -contentWidth) {
                                pauseCounter++;
                            } else {
                                position -= speed;
                            }
                            content.style.left = position + 'px';
                        }
                        requestAnimationFrame(moveText);
                    }
                    moveText();
                }, 100);
            }
        });
    }

    // 代理模式
    function get_rule_mode() {
        StateManager.cachedXHRGet('<%=luci.dispatcher.build_url("admin", "services", "openclash", "rule_mode")%>', function(x, status) {
            if (x && x.status == 200 && status.mode != "") {
                if (status.core_type == "TUN" && DOMCache.radio.length != 4) {
                    script_radio = document.createElement("input");
                    script_radio.setAttribute("type", "radio");
                    script_radio.setAttribute("id", "script");
                    script_radio.setAttribute("name", "radios");
                    script_radio.setAttribute("value", "script");
                    script_radio.setAttribute("onclick", "javascript:return switch_rule_mode(this.value);");
                    script_radio_label = document.createElement("label");
                    script_radio_label.setAttribute("for", "script");
                    script_radio_label.innerHTML = "Script";
                    DOMCache.radio_mode.appendChild(script_radio);
                    DOMCache.radio_mode.appendChild(script_radio_label);
                } else if (status.core_type != "TUN" && DOMCache.radio.length == 4) {
                    DOMCache.radio_mode.removeChild(script_radio);
                    DOMCache.radio_mode.removeChild(script_radio_label);
                }
                for (var i = 0; i < DOMCache.radio.length; i++) {
                    if (DOMCache.radio[i].value == status.mode && !DOMCache.radio[i].checked) {
                        DOMCache.radio[i].checked = true;
                        break;
                    }
                }
            }
        });
        s = setTimeout("get_rule_mode()", 5000);
    }

    function switch_rule_mode(value) {
        clearTimeout(s);
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "switch_rule_mode")%>', {rule_mode: value}, function(x, status) {
            if (x && x.status == 200) {
                alert(' <%:Proxy Mode%>: ' + value + ' <%:switching succeeded!%>');
                get_rule_mode();
            } else {
                alert(' <%:Proxy Mode%>: ' + value + ' <%:switching failed!%>');
                get_rule_mode();
            }
        });
    }
    
    function get_run_mode() {
		StateManager.cachedXHRGet('<%=luci.dispatcher.build_url("admin", "services", "openclash", "get_run_mode")%>', function(x, status) {
			if (x && x.status == 200 && status.mode) {
				var isRunning = StateManager.current_status.clash && StateManager.current_status.watchdog;
				
				if (status.mode == "fake-ip" || status.mode == "fake-ip-tun" || status.mode == "fake-ip-mix") {
					DOMCache.mode.innerHTML = isRunning ? "<b style=color:green><%:Fake-IP%></b>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;" : '<b style=color:red><%:Not Running%></b>&nbsp;&nbsp;&nbsp;';
					DOMCache.radio_run_normal.innerHTML = "<%:Enhance%>";
				} else if (status.mode == "redir-host" || status.mode == "redir-host-tun" ||  status.mode == "redir-host-mix") {
					DOMCache.mode.innerHTML = isRunning ? "<b style=color:green><%:Redir-Host%></b>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;" : '<b style=color:red><%:Not Running%></b>&nbsp;&nbsp;&nbsp;';
					DOMCache.radio_run_normal.innerHTML = "<%:Compat%>";
				}
				
				for (var i = 0; i < DOMCache.radio_ru.length; i++) {
					if (DOMCache.radio_ru[i].value == (status["mode"].split("-")[2] == undefined ? "" : ("-" + status["mode"].split("-")[2])) && !DOMCache.radio_ru[i].checked) {
						DOMCache.radio_ru[i].checked = true;
					}
				}
			}
		});
	}

    function switch_run_mode(value) {
        var r = confirm("<%:Are you sure want to switch the running mode?%>");
        if (r == true) {
            XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "switch_run_mode")%>', {run_mode: value}, function(x, status) {
                get_run_mode();
            });
        }
    }
    
    function state_get() {
        StateManager.cachedXHRGet('<%=luci.dispatcher.build_url("admin", "services", "openclash", "state")%>', function(x, status) {
            if (x && x.status == 200) {
                var updates = [
                    {
                        element: DOMCache.ipdb,
                        content: status.ipdb ? "<b style=color:green>"+status.ipdb+"</b>" : "<b style=color:red>"+"<%:File Not Exist%>"+"</b>"
                    },
                    {
                        element: DOMCache.geosite,
                        content: status.geosite ? "<b style=color:green>"+status.geosite+"</b>" : "<b style=color:red>"+"<%:File Not Exist%>"+"</b>"
                    },
                    {
                        element: DOMCache.lhie1,
                        content: status.lhie1 ? "<b style=color:green>"+status.lhie1+"</b>" : "<b style=color:red>"+"<%:File Not Exist%>"+"</b>"
                    },
                    {
                        element: DOMCache.chnroute,
                        content: status.chnroute ? "<b style=color:green>"+status.chnroute+"</b>" : "<b style=color:red>"+"<%:File Not Exist%>"+"</b>"
                    },
                    {
                        element: DOMCache.chnroutev6,
                        content: status.chnroutev6 ? "<b style=color:green>"+status.chnroutev6+"</b>" : "<b style=color:red>"+"<%:File Not Exist%>"+"</b>"
                    },
                    {
                        element: DOMCache.historychecktime,
                        content: status.historychecktime != "0" ? "<b style=color:green>"+status.historychecktime+"</b>" : "<b style=color:green>"+"<%:No Backup%>"+"</b>"
                    }
                ];
                StateManager.batchUpdateDOM(updates);
            }
        });
    }
    
    function hid_btn_action() {
        if (hid_btn_if) {
            DOMCache.hid_1.style.display = "";
            DOMCache.hid_2.style.display = "";
            DOMCache.hid_3.style.display = "";
            DOMCache.state.style.display = "block";
            DOMCache.hid_icon.style.borderColor = "transparent transparent rgb(65 122 180) transparent";
            hid_btn_if = false;
            clearInterval(state_refresh);
            state_refresh = setInterval("state_get()", 2000);
        } else {
            DOMCache.hid_1.style.display = "none";
            DOMCache.hid_2.style.display = "none";
            DOMCache.hid_3.style.display = "none";
            DOMCache.state.style.display = "none";
            DOMCache.hid_icon.style.borderColor = "rgb(65 122 180) transparent transparent transparent";
            hid_btn_if = true;
            clearInterval(state_refresh);
        }
    }

    function winOpen(url) {
        var winOpen = window.open(url);
        if (winOpen == null || typeof(winOpen) == 'undefined') {
            window.location.href = url;
        }
    }
     
    // WebSocket消息回退
    function ws_terror() {
        ws_error = true;
        StateManager.cachedXHRGet('<%=luci.dispatcher.build_url("admin", "services", "openclash", "toolbar_show")%>', function(x, status) {
            if (x && x.status == 200 && x.responseText != "") {
                var updates = [
                    {element: document.getElementById("upload_"), content: "<font style=\"color:green\">"+status.up+"</font>"},
                    {element: document.getElementById("download_"), content: "<font style=\"color:green\">"+status.down+"</font>"},
                    {element: document.getElementById("uploadtotal_"), content: "<font style=\"color:green\">"+status.up_total+"</font>"},
                    {element: document.getElementById("downloadtotal_"), content: "<font style=\"color:green\">"+status.down_total+"</font>"},
                    {element: document.getElementById("mem_t"), content: "<font style=\"color:green\">"+status.mem+"</font>"},
                    {element: document.getElementById("connect_t"), content: "<font style=\"color:green\">"+status.connections+"</font>"}
                ];
                
                var cpuColor = status.cpu <= 50 ? "green" : (status.cpu <= 80 ? "orange" : "red");
                var cpuValue = status.cpu <= 100 ? status.cpu + " %" : "0 %";
                updates.push({element: document.getElementById("cpu_t"), content: "<font style=\"color:"+cpuColor+"\">"+cpuValue+"</font>"});
                
                StateManager.batchUpdateDOM(updates);
            } else {
                var fallbackUpdates = [
                    {element: document.getElementById("upload_"), content: "<font style=\"color:green\">0 B/S</font>"},
                    {element: document.getElementById("download_"), content: "<font style=\"color:green\">0 B/S</font>"},
                    {element: document.getElementById("uploadtotal_"), content: "<font style=\"color:green\">0 KB</font>"},
                    {element: document.getElementById("downloadtotal_"), content: "<font style=\"color:green\">0 KB</font>"},
                    {element: document.getElementById("mem_t"), content: "<font style=\"color:green\">0 KB</font>"},
                    {element: document.getElementById("cpu_t"), content: "<font style=\"color:green\">0 %</font>"},
                    {element: document.getElementById("connect_t"), content: "<font style=\"color:green\">0</font>"}
                ];
                StateManager.batchUpdateDOM(fallbackUpdates);
            }
        });
    }
    
    function show_sys() {
        StateManager.cachedXHRGet('<%=luci.dispatcher.build_url("admin", "services", "openclash", "toolbar_show_sys")%>', function(x, status) {
            if (x && x.status == 200 && x.responseText != "") {
                var cpuColor = status.cpu <= 50 ? "green" : (status.cpu <= 80 ? "orange" : "red");
                var cpuValue = status.cpu <= 100 ? status.cpu + " %" : "0 %";
                document.getElementById("cpu_t").innerHTML = "<font style=\"color:"+cpuColor+"\">"+cpuValue+"</font>";
            } else {
                document.getElementById("cpu_t").innerHTML = "<font style=\"color:green\">0 %</font>";
            }
        });
    }

    function ws_tmessage(event) {
        var data = JSON.parse(event.data);
        var uploadElement = document.getElementById("upload_");
        var downloadElement = document.getElementById("download_");
        
        uploadElement.innerHTML = data.up ? "<font style=\"color:green\">"+bytesToSize(data.up)+"/S</font>" : "<font style=\"color:green\">0 B/S</font>";
        downloadElement.innerHTML = data.down ? "<font style=\"color:green\">"+bytesToSize(data.down)+"/S</font>" : "<font style=\"color:green\">0 B/S</font>";
    }
    
    function ws_cmessage(event) {
        var data = JSON.parse(event.data);
        var updates = [
            {
                element: document.getElementById("uploadtotal_"),
                content: data.uploadTotal ? "<font style=\"color:green\">"+bytesToSize(data.uploadTotal)+"</font>" : "<font style=\"color:green\">0 KB</font>"
            },
            {
                element: document.getElementById("downloadtotal_"),
                content: data.downloadTotal ? "<font style=\"color:green\">"+bytesToSize(data.downloadTotal)+"</font>" : "<font style=\"color:green\">0 KB</font>"
            },
            {
                element: document.getElementById("connect_t"),
                content: data.connections ? "<font style=\"color:green\">"+Object.keys(data.connections).length+"</font>" : "<font style=\"color:green\">0</font>"
            }
        ];
        StateManager.batchUpdateDOM(updates);
    }

    function ws_mmessage(event) {
        var data = JSON.parse(event.data);
        var memElement = document.getElementById("mem_t");
        memElement.innerHTML = data.inuse ? "<font style=\"color:green\">"+bytesToSize(data.inuse)+"</font>" : "<font style=\"color:green\">0 KB</font>";
        show_sys();
    }

    function bytesToSize(bytes) {
        var sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];
        if (bytes == 0) return '0 B';
        var i = Math.floor(Math.log(bytes) / Math.log(1024));
        return i == 0 ? (bytes / Math.pow(1024, i)) + ' ' + sizes[i] : (bytes / Math.pow(1024, i)).toFixed(1) + ' ' + sizes[i];
    }

    // 按钮操作
    var buttonDebounce = {};
    function debounceButton(fn, delay) {
        return function(btn) {
            var key = btn.id || btn.value;
            if (buttonDebounce[key]) {
                clearTimeout(buttonDebounce[key]);
            }
            buttonDebounce[key] = setTimeout(function() {
                fn(btn);
                delete buttonDebounce[key];
            }, delay || 300);
        };
    }
      
    var all_one_key_update = debounceButton(function(btn) {
        btn.value = '<%:Check All Components Update%>';
        btn.disabled = true;
        var r = confirm("<%:Check and Update all Cores and OpenClash?%>");
        if (r == true) {
            XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "one_key_update_check")%>', null, function(x, status) {
                if (x && x.status == 200) {
                    if (status.corever != "0") {
                        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "one_key_update")%>', null, function(x, status) {
                            if (x && x.status != 200) {
                                alert('<%:Check failed, Please try again later!%>');
                            }
                        });
                    } else {
                        alert('<%:No compiled version is selected. Please configure it in the General Settings tab!%>');
                    }
                } else {
                    alert('<%:Check failed, Please try again later!%>');
                }
            });
        }
        btn.disabled = false;
        return false; 
    });
    
    var b_update_other_rules = debounceButton(function(btn) {
        btn.disabled = true;
        btn.value = '<%:Checking...%>';
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "update_other_rules")%>', null, function(x, status) {
            btn.disabled = false;
            btn.value = '<%:Check Third Party Rules Update%>';
        });
        return false;
    });
    
    var b_update_geoip = debounceButton(function(btn) {
        btn.disabled = true;
        btn.value = '<%:Checking...%>';
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "update_geoip")%>', null, function(x, status) {
            btn.disabled = false;
            btn.value = '<%:Check GEOIP Data Update%>';
        });
        return false;
    });
    
    var b_update_geosite = debounceButton(function(btn) {
        btn.disabled = true;
        btn.value = '<%:Checking...%>';
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "update_geosite")%>', null, function(x, status) {
            btn.disabled = false;
            btn.value = '<%:Check GeoSite Data Update%>';
        });
        return false;
    });
    
    var b_flush_fakeip_cache = debounceButton(function(btn) {
        btn.disabled = true;
        btn.value = '<%:Flushing...%> ';
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash","flush_fakeip_cache")%>', null, function(x, status) {
            if (x && x.status == 200) {
                btn.value = (status.flush_status == "0" || status.flush_status != "") ? '<%:Flush Failed%>' : '<%:Flush Successful%>';
            } else {
                btn.value = '<%:Flush Timeout%>';
            }
        });
        btn.disabled = false;
        return false;
    });
    
    var b_update_subscribe = debounceButton(function(btn) {
        btn.disabled = true;
        btn.value = '<%:Checking...%>';
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "update_subscribe")%>', null, function(x, status) {
            btn.disabled = false;
            btn.value = '<%:Check Config Update%>';
        });
        return false;
    });
    
    var b_reload_firewall = debounceButton(function(btn) {
        btn.disabled = true;
        btn.value = '<%:Reloading...%>';
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "reload_firewall")%>', null, function(x, status) {
            btn.disabled = false;
            btn.value = (x && x.status == 200) ? '<%:Reload Firewall Rules%>' : '<%:Firewall Rules Reset Failed%>';
        });
        return false;
    });

    var b_close_all_connection = debounceButton(function(btn) {
        btn.disabled = true;
        btn.value = '<%:Reloading...%>';
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "close_all_connection")%>', null, function(x, status) {
            btn.disabled = false;
            btn.value = (x && x.status == 200) ? '<%:Close All Connections%>' : '<%:Close All Connections Failed%>';
        });
        return false;
    });
        
    function net_zashboard(btn) {
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "status")%>', null, function(x, status) {
            btn.disabled = true;
            btn.value = '<%:zashboard Control Panel%>';
            var url9;
            if (status.daip && window.location.hostname == status.daip) {
                url9 = 'http://' + window.location.hostname + ':' + status.cn_port + '/ui/zashboard/#/setup?hostname=' + window.location.hostname + '&port=' + status.cn_port + '&secret=' + status.dase;
            } else if (status.daip && window.location.hostname != status.daip && status.db_foward_domain && status.db_foward_port) {
                var ui_proto = status.db_forward_ssl == 0 ? 'http://' : 'https://';
                url9 = ui_proto + status.db_foward_domain + ':' + status.db_foward_port + '/ui/zashboard/#/setup?hostname=' + status.db_foward_domain + '&port=' + status.db_foward_port + '&secret=' + status.dase;
            } else {
                url9 = 'http://' + window.location.hostname + ':' + status.cn_port + '/ui/zashboard/#/';
            }
            winOpen(url9);
        });
        return false;
    }

    function meta_dashboard(btn) {
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "status")%>', null, function(x, status) {
            btn.disabled = true;
            btn.value = '<%:Metacubexd Control Panel%>';
            var url9;
            if (status.daip && window.location.hostname == status.daip) {
                url9 = 'http://' + window.location.hostname + ':' + status.cn_port + '/ui/metacubexd/#/setup?hostname=' + window.location.hostname + '&port=' + status.cn_port + '&secret=' + status.dase;
            } else if (status.daip && window.location.hostname != status.daip && status.db_foward_domain && status.db_foward_port) {
                var ui_proto = status.db_forward_ssl == 0 ? 'http://' : 'https://';
                url9 = ui_proto + status.db_foward_domain + ':' + status.db_foward_port + '/ui/metacubexd/#/setup?hostname=' + status.db_foward_domain + '&port=' + status.db_foward_port + '&secret=' + status.dase;
            } else {
                url9 = 'http://' + window.location.hostname + ':' + status.cn_port + '/ui/metacubexd/#/';
            }
            winOpen(url9);
        });
        return false;
    }

    function ycad_dashboard(btn) {
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "status")%>', null, function(x, status) {
            btn.disabled = true;
            btn.value = '<%:Yacd Control Panel%>';
            var url1;
            if (status.daip && window.location.hostname == status.daip) {
                url1 = 'http://' + window.location.hostname + ':' + status.cn_port + '/ui/yacd/?hostname=' + window.location.hostname + '&port=' + status.cn_port + '&secret=' + status.dase;
            } else if (status.daip && window.location.hostname != status.daip && status.db_foward_domain && status.db_foward_port) {
                var ui_proto = status.db_forward_ssl == 0 ? 'http://' : 'https://';
                url1 = ui_proto + status.db_foward_domain + ':' + status.db_foward_port + '/ui/yacd/?hostname=' + status.db_foward_domain + '&port=' + status.db_foward_port + '&secret=' + status.dase;
            } else {
                url1 = 'http://' + window.location.hostname + ':' + status.cn_port + '/ui/yacd/';
            }
            winOpen(url1);
        });
        return false;
    }
    
    function net_dashboard(btn) {
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "status")%>', null, function(x, status) {
            btn.disabled = true;
            btn.value = '<%:Dashboard Control Panel%>';
            var url2;
            if (status.daip && window.location.hostname == status.daip) {
                url2 = 'http://' + window.location.hostname + ':' + status.cn_port + '/ui/dashboard/#/?host=' + window.location.hostname + '&port=' + status.cn_port + '&secret=' + status.dase;
            } else if (status.daip && window.location.hostname != status.daip && status.db_foward_domain && status.db_foward_port) {
                var ui_proto = status.db_forward_ssl == 0 ? 'http://' : 'https://';
                url2 = ui_proto + status.db_foward_domain + ':' + status.db_foward_port + '/ui/dashboard/#/?host=' + status.db_foward_domain + '&port=' + status.db_foward_port + '&secret=' + status.dase;
            } else {
                url2 = 'http://' + window.location.hostname + ':' + status.cn_port + '/ui/dashboard/';
            }
            winOpen(url2);
        });
        return false;
    }
    
    function homepage() {
        url3 = 'https://github.com/vernesong/OpenClash';
        winOpen(url3);
    }
    
    function gitbookpage() {
        url8 = 'https://wiki.metacubex.one';
        winOpen(url8);
    }

    function wikipage() {
        url5 = 'https://github.com/vernesong/OpenClash/wiki';
        winOpen(url5);
    }
    
    function telegrampage() {
        url6 = 'https://t.me/ctcgfw_openwrt_discuss';
        winOpen(url6);
    }
    
    function sponsorpage() {
        url7 = 'https://ko-fi.com/vernesong';
        winOpen(url7);
    }

    function logo_check(imgobj, imgSrc, imgNewSrc) {
        var newimg = new Image();
        newimg.src = imgNewSrc;
        newimg.onload = function() {
            imgobj.src = imgNewSrc;
            imgobj.loading = "lazy";
            imgobj.onload = function() {};
        };
        newimg.onerror = function() {
            imgobj.onload = function() {};
            imgerrorfuns(imgobj, imgSrc);
        };
    }

    function clashversion_check() {
        StateManager.cachedXHRGet('<%=luci.dispatcher.build_url("admin", "services", "openclash", "lastversion")%>', function(x, status) {
            if (x && x.status == 200) {
                if (status.lastversion != "") {
                    DOMCache.clashversion.innerHTML = '<img id="lastver" src="'+status.lastversion+'" alt="lastversion" onerror="return clashversion_error()" onclick="return go_update()">';
                }
            }
        });
    }

    function clashversion_error() {
        DOMCache.clashversion.innerHTML = '<img id="clashversion" src="/luci-static/resources/openclash/img/version.svg?<%=random%>" alt="currentversion" height="21px" onclick="return go_update()">';
    }

    function logo_error(imgobj, imgSrc) {
        imgobj.src = imgSrc;
    }
    
    function imgerrorfuns(imgobj, imgSrc) {
        setTimeout(function() {
            imgobj.src = imgSrc;
            imgobj.loading = "lazy";
        }, 10000);
    }
     
    function go_update() {
        url4 = 'https://github.com/vernesong/OpenClash/releases';
        winOpen(url4);
    }

    function check_core() {
        StateManager.cachedXHRGet('<%=luci.dispatcher.build_url("admin", "services", "openclash", "check_core")%>', function(x, status) {
            if (x && x.status == 200) {
                if (status.core_status != "1") {
                    var r = confirm("<%:You have not installed the core yet, do you want to download and install it now?%>");
                    if (r == true) {
                        return select_git_cdn("core_download");
                    }
                }
            }
        });
    }

    // 复制按钮
    function copyToClipboard(text, successMessage) {
        if (navigator.clipboard && window.isSecureContext) {
            navigator.clipboard.writeText(text).then(function() {
                prompt(successMessage, text);
            }).catch(function(err) {
                fallbackCopyTextToClipboard(text, successMessage);
            });
        } else {
            fallbackCopyTextToClipboard(text, successMessage);
        }
    }

    function copyAddress() {
        var address = (StateManager.current_status.daip || 'unknown') + ':' + (StateManager.current_status.cn_port || '9090');
        copyToClipboard(address, '<%:Control panel address copied:%> ');
        return false;
    }

    function copySecret() {
        var secret = StateManager.current_status.dase || '';
        if (secret === '') {
            alert('<%:No control panel secret set%>');
            return false;
        }
        copyToClipboard(secret, '<%:Control panel secret copied:%> ');
        return false;
    }

    function copyMixAuth() {
        if (StateManager.cached_proxy_info) {
            if (StateManager.cached_proxy_info.auth_user && StateManager.cached_proxy_info.auth_pass) {
                var authText = StateManager.cached_proxy_info.auth_user + ':' + StateManager.cached_proxy_info.auth_pass;
                copyToClipboard(authText, '<%:Proxy auth info copied:%> ');
            } else {
                alert('<%:No proxy auth info set%>');
            }
        } else {
            alert('<%:Proxy info not available, please try again later%>');
        }
        return false;
    }

    function copyMixAddress() {
        if (StateManager.cached_proxy_info && StateManager.current_status.daip) {
            var mixPort = StateManager.cached_proxy_info.mixed_port || '7893';
            var proxyIp = StateManager.current_status.daip;
            var proxyText = proxyIp + ':' + mixPort;
            copyToClipboard(proxyText, '<%:Mix proxy address copied:%> ');
        } else {
            alert('<%:Proxy info not available, please try again later%>');
        }
        return false;
    }

    function get_oc_settings() {
        StateManager.cachedXHRGet('<%=luci.dispatcher.build_url("admin", "services", "openclash", "oc_settings")%>', function(x, info) {
            if (x && x.status == 200) {
                DOMCache.meta_sniffer_on.checked = info.meta_sniffer == "1";
                DOMCache.meta_sniffer_off.checked = info.meta_sniffer != "1";
                DOMCache.respect_rules_on.checked = info.respect_rules == "1";
                DOMCache.respect_rules_off.checked = info.respect_rules != "1";
                
                if (info.oversea == "0") {
                    DOMCache.oc_setting_oversea_0.checked = true;
                } else if (info.oversea == "1") {
                    DOMCache.oc_setting_oversea_1.checked = true;
                } else if (info.oversea == "2") {
                    DOMCache.oc_setting_oversea_2.checked = true;
                }
            }
        });
    }

    function switch_oc_setting_oversea(value) {
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "switch_oc_setting")%>', {
            setting: 'oversea',
            value: value
        }, function(x, status) {
            if (x && x.status == 200) {
                var statusText = value == "0" ? "<%:Off%>" : (value == "1" ? "<%:Mainland%>" : "<%:Oversea%>");
                alert('<%:Area bypass setting switched to:%> ' + statusText);
            } else {
                get_oc_settings();
                alert('<%:Area bypass setting failed%>');
            }
        });
        return false;
    }

    function switch_meta_sniffer(value) {
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "switch_oc_setting")%>', {
            setting: 'meta_sniffer',
            value: value
        }, function(x, status) {
            if (x && x.status == 200) {
                alert('<%:Sniffer setting%> ' + (value == '1' ? '<%:Enabled%>' : '<%:Disabled%>'));
            } else {
                get_oc_settings();
                alert('<%:Sniffer setting failed%>');
            }
        });
        return false;
    }

    function switch_respect_rules(value) {
        XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "switch_oc_setting")%>', {
            setting: 'respect_rules',
            value: value
        }, function(x, status) {
            if (x && x.status == 200) {
                alert('<%:Respect Rules setting%> ' + (value == '1' ? '<%:Enabled%>' : '<%:Disabled%>'));
            } else {
                get_oc_settings();
                alert('<%:Respect Rules setting failed%>');
            }
        });
        return false;
    }

    function generatePacConfig() {
        if (StateManager.current_status.clash && StateManager.current_status.daip) {
            var currentUrl = {
                protocol: window.location.protocol,
                hostname: window.location.hostname,
                host: window.location.host,
                port: window.location.port,
                href: window.location.href
            };
            
            XHR.get('<%=luci.dispatcher.build_url("admin", "services", "openclash", "generate_pac")%>', {
                client_protocol: currentUrl.protocol.replace(':', ''),
                client_hostname: currentUrl.hostname,
                client_host: currentUrl.host,
                client_port: currentUrl.port || '',
                client_href: currentUrl.href
            }, function(x, data) {
                if (x && x.status == 200 && data.pac_url) {
                    if (data.error && data.error.indexOf("warning:") === 0) {
                        var warningMsg = data.error.replace("warning: ", "");
                        var warningTranslations = {
                            'No authentication configured, please be aware of the risk of information leakage!': '<%:No authentication configured, please be aware of the risk of information leakage!%>'
                        };
                        var translatedWarning = warningTranslations[warningMsg] || warningMsg;
                        alert('<%:Warning:%> ' + translatedWarning);
                    }
                    copyToClipboard(data.pac_url, '<%:PAC file URL copied:%> ');
                } else if (data.error) {
                    errorinfos = {
                        'Proxy service not running': '<%:Proxy service not running%>',
                        'Unable to get proxy IP': '<%:Unable to get proxy IP%>',
                        'Failed to write PAC file': '<%:Failed to write PAC file%>'
                    };
                    var errorMsg = errorinfos[data.error] || data.error;
                    alert('<%:PAC file generation failed%>: ' + errorMsg);
                } else {
                    alert('<%:PAC file generation failed%>');
                }
            });
        } else {
            alert('<%:Proxy service not available, please try again later%>');
        }
        return false;
    }

    function fallbackCopyTextToClipboard(text, successMessage) {
        var textArea = document.createElement("textarea");
        textArea.value = text;
        textArea.style.top = "0";
        textArea.style.left = "0";
        textArea.style.position = "fixed";
        textArea.style.opacity = "0";
        
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();
        
        try {
            var successful = document.execCommand('copy');
            document.body.removeChild(textArea);
            
            if (successful) {
                prompt(successMessage, text);
            } else {
                prompt('<%:Copy failed, please copy manually:%>', text);
            }
        } catch (err) {
            document.body.removeChild(textArea);
            prompt('<%:Copy failed, please copy manually:%>', text);
        }
    }

    function check_guide() {
        StateManager.cachedXHRGet('<%=luci.dispatcher.build_url("admin", "services", "openclash", "check_guide_needed")%>', function(x, status) {
            if (x && x.status == 200) {
                if (status.need_guide && !localStorage.getItem('openclash_guide_dismissed')) {
                    var r = confirm("<%:OpenClash seems to be running for the first time, do you want to use the quick setup guide?%>");
                    if (r == true) {
                        return show_guide_window();
                    } else {
                        localStorage.setItem('openclash_guide_dismissed', 'true');
                    }
                }
            }
        });
    }

    function show_guide_window() {
        if (typeof showGuide === 'function') {
            showGuide();
        } else {
            setTimeout(function() {
                if (typeof showGuide === 'function') {
                    showGuide();
                }
            }, 500);
        }
    }
//]]></script>